import scanpy as sc
import pandas as pd
import numpy as np
import os

# Step 1: Set input file path
input_file = "Data/perturb_processed.h5ad"

# Step 2: Load the dataset
print(f"Loading dataset from: {input_file}")
adata = sc.read_h5ad(input_file)

print(f"Loaded AnnData: shape = {adata.shape}")
print("Unique conditions found:", adata.obs["condition"].unique()[:10], "...")

# Step 3: Replace ENSEMBL IDs with gene names for the entire dataset
print("Converting ENSEMBL IDs to gene names...")

# Check if gene_name column exists
if "gene_name" in adata.var.columns:
    print("Found 'gene_name' column in .var")

    # Get gene names and handle duplicates
    gene_names = adata.var["gene_name"].values

    # Check for duplicates
    unique_genes = set()
    duplicate_count = 0
    final_gene_names = []

    for i, gene_name in enumerate(gene_names):
        if gene_name in unique_genes:
            # Handle duplicate by appending ENSEMBL ID
            original_ensembl = adata.var_names[i]
            new_name = f"{gene_name}_{original_ensembl.split('.')[-1] if '.' in original_ensembl else original_ensembl[-6:]}"
            final_gene_names.append(new_name)
            duplicate_count += 1
            print(f"Duplicate gene name '{gene_name}' renamed to '{new_name}'")
        else:
            final_gene_names.append(gene_name)
            unique_genes.add(gene_name)

    # Replace the var_names with gene names
    adata.var_names = final_gene_names

    # Make var_names unique
    adata.var_names_unique = True

    print(f"Converted {len(gene_names)} ENSEMBL IDs to gene names")
    print(f"Found {duplicate_count} duplicate gene names (renamed with suffix)")

    print(f"\nSample gene names (first 10):")
    for i, gene_name in enumerate(adata.var_names[:10]):
        print(f"  {i+1:2d}. {gene_name}")

else:
    print("Warning: No 'gene_name' column found in .var")
    print("Available columns:", list(adata.var.columns))

# Step 4: Define target gene list (transcription factors- Tf..xlsx file given by Nicolai)
target_genes = [
    "TFAP2B",
    "TFAP2C",
    "TFAP2D",
    "TFAP2E",
    "ARID3A",
    "ARID3B",
    "ARID3C",
    "ARID5A",
    "ARID5B",
    "KDM5B",
    "ARID2",
    "AHCTF1",
    "AHDC1",
    "AKNA",
    "ASH1L",
    "CBX2",
    "DNTTIP1",
    "DOT1L",
    "GLYR1",
    "HMGA1",
    "HMGA2",
    "PHF20",
    "PHF21A",
    "PRR12",
    "SCML4",
    "SETBP1",
    "SRCAP",
    "C11orf95",
    "FAM200B",
    "SGSM2",
    "ZBED1",
    "ZBED2",
    "ZBED3",
    "ZBED4",
    "ZBED5",
    "ZBED6",
    "ZBED9",
    "AHR",
    "AHRR",
    "ARNT",
    "ARNT2",
    "ARNTL",
    "ARNTL2",
    "ASCL1",
    "ASCL2",
    "ASCL3",
    "ASCL4",
    "ASCL5",
    "ATOH1",
    "ATOH7",
    "ATOH8",
    "BHLHA15",
    "BHLHA9",
    "BHLHE22",
    "BHLHE23",
    "BHLHE40",
    "BHLHE41",
    "CCDC169-SOHLH2",
    "CLOCK",
    "EPAS1",
    "FERD3L",
    "FIGLA",
    "HAND1",
    "HAND2",
    "HELT",
    "HES1",
    "HES2",
    "HES3",
    "HES4",
    "HES5",
    "HES6",
    "HES7",
    "HEY1",
    "HEY2",
    "HEYL",
    "HIF1A",
    "HIF3A",
    "LYL1",
    "MAX",
    "MESP1",
    "MESP2",
    "MITF",
    "MLX",
    "MLXIP",
    "MLXIPL",
    "MNT",
    "MSC",
    "MSGN1",
    "MXD1",
    "MXD3",
    "MXD4",
    "MXI1",
    "MYC",
    "MYCL",
    "MYCN",
    "MYF5",
    "MYF6",
    "MYOD1",
    "MYOG",
    "NCOA1",
    "NCOA2",
    "NCOA3",
    "NEUROD1",
    "NEUROD2",
    "NEUROD4",
    "NEUROD6",
    "NEUROG1",
    "NEUROG2",
    "NEUROG3",
    "NHLH1",
    "NHLH2",
    "NPAS1",
    "NPAS2",
    "NPAS3",
    "NPAS4",
    "OLIG1",
    "OLIG2",
    "OLIG3",
    "PTF1A",
    "SCX",
    "SIM1",
    "SIM2",
    "SOHLH1",
    "SOHLH2",
    "SREBF1",
    "SREBF2",
    "TAL1",
    "TAL2",
    "TCF12",
    "TCF15",
    "TCF21",
    "TCF23",
    "TCF24",
    "TCF3",
    "TCF4",
    "TCFL5",
    "TFAP4",
    "TFE3",
    "TFEB",
    "TFEC",
    "TWIST1",
    "TWIST2",
    "USF1",
    "USF2",
    "USF3",
    "POGK",
    "AC023509.3",
    "ATF1",
    "ATF2",
    "ATF3",
    "ATF4",
    "ATF5",
    "ATF6",
    "ATF6B",
    "ATF7",
    "BACH1",
    "BACH2",
    "BATF",
    "BATF2",
    "BATF3",
    "CEBPA",
    "CEBPB",
    "CEBPD",
    "CEBPE",
    "CEBPG",
    "CREB1",
    "CREB3",
    "CREB3L1",
    "CREB3L2",
    "CREB3L3",
    "CREB3L4",
    "CREB5",
    "CREBL2",
    "CREBZF",
    "CREM",
    "DBP",
    "DDIT3",
    "FOS",
    "FOSB",
    "FOSL1",
    "FOSL2",
    "HLF",
    "JDP2",
    "JUN",
    "JUNB",
    "JUND",
    "MAF",
    "MAFA",
    "MAFB",
    "MAFF",
    "MAFG",
    "MAFK",
    "NFE2",
    "NFE2L1",
    "NFE2L2",
    "NFE2L3",
    "NFIL3",
    "NRL",
    "TEF",
    "XBP1",
    "AC008770.3",
    "AC092835.1",
    "AC138696.1",
    "AEBP2",
    "AKAP8",
    "AKAP8L",
    "ANKZF1",
    "ATMIN",
    "BCL11A",
    "BCL11B",
    "BCL6",
    "BCL6B",
    "BNC1",
    "BNC2",
    "CASZ1",
    "CCDC17",
    "CHAMP1",
    "CPXCR1",
    "CTCF",
    "CTCFL",
    "DPF1",
    "DPF3",
    "DZIP1",
    "E4F1",
    "EEA1",
    "EGR1",
    "EGR2",
    "EGR3",
    "EGR4",
    "FAM170A",
    "FEZF1",
    "FEZF2",
    "FIZ1",
    "GFI1",
    "GFI1B",
    "GLI1",
    "GLI2",
    "GLI3",
    "GLI4",
    "GLIS1",
    "GLIS2",
    "GLIS3",
    "GTF3A",
    "GZF1",
    "HIC1",
    "HIC2",
    "HINFP",
    "HIVEP1",
    "HIVEP2",
    "HIVEP3",
    "HKR1",
    "IKZF1",
    "IKZF2",
    "IKZF3",
    "IKZF4",
    "IKZF5",
    "INSM1",
    "INSM2",
    "JAZF1",
    "KAT7",
    "KCMF1",
    "KIN",
    "KLF1",
    "KLF10",
    "KLF11",
    "KLF12",
    "KLF13",
    "KLF14",
    "KLF15",
    "KLF16",
    "KLF17",
    "KLF2",
    "KLF3",
    "KLF4",
    "KLF5",
    "KLF6",
    "KLF7",
    "KLF8",
    "KLF9",
    "L3MBTL1",
    "L3MBTL3",
    "L3MBTL4",
    "MAZ",
    "MECOM",
    "MTF1",
    "MYNN",
    "MYT1",
    "MYT1L",
    "MZF1",
    "OSR1",
    "OSR2",
    "OVOL1",
    "OVOL2",
    "OVOL3",
    "PEG3",
    "PLAG1",
    "PLAGL1",
    "PLAGL2",
    "PRDM1",
    "PRDM10",
    "PRDM12",
    "PRDM13",
    "PRDM14",
    "PRDM15",
    "PRDM16",
    "PRDM2",
    "PRDM4",
    "PRDM5",
    "PRDM6",
    "PRDM8",
    "PRDM9",
    "PRMT3",
    "RBAK",
    "RBSN",
    "REPIN1",
    "REST",
    "RLF",
    "RREB1",
    "SALL1",
    "SALL2",
    "SALL3",
    "SALL4",
    "SCRT1",
    "SCRT2",
    "SLC2A4RG",
    "SNAI1",
    "SNAI2",
    "SNAI3",
    "SP1",
    "SP2",
    "SP3",
    "SP4",
    "SP5",
    "SP6",
    "SP7",
    "SP8",
    "SP9",
    "ST18",
    "TRAFD1",
    "TSHZ1",
    "TSHZ2",
    "TSHZ3",
    "VEZF1",
    "WIZ",
    "WT1",
    "YY1",
    "YY2",
    "ZBTB1",
    "ZBTB10",
    "ZBTB11",
    "ZBTB12",
    "ZBTB14",
    "ZBTB16",
    "ZBTB17",
    "ZBTB18",
    "ZBTB2",
    "ZBTB20",
    "ZBTB21",
    "ZBTB22",
    "ZBTB25",
    "ZBTB26",
    "ZBTB3",
    "ZBTB32",
    "ZBTB33",
    "ZBTB34",
    "ZBTB37",
    "ZBTB38",
    "ZBTB39",
    "ZBTB4",
    "ZBTB40",
    "ZBTB41",
    "ZBTB42",
    "ZBTB43",
    "ZBTB44",
    "ZBTB45",
    "ZBTB46",
    "ZBTB47",
    "ZBTB48",
    "ZBTB49",
    "ZBTB5",
    "ZBTB6",
    "ZBTB7A",
    "ZBTB7B",
    "ZBTB7C",
    "ZBTB8A",
    "ZBTB8B",
    "ZBTB9",
    "ZFAT",
    "ZFP1",
    "ZFP14",
    "ZFP2",
    "ZFP28",
    "ZFP3",
    "ZFP30",
    "ZFP37",
    "ZFP41",
    "ZFP42",
    "ZFP57",
    "ZFP62",
    "ZFP64",
    "ZFP69",
    "ZFP69B",
    "ZFP82",
    "ZFP90",
    "ZFP91",
    "ZFP92",
    "ZFPM1",
    "ZFPM2",
    "ZFX",
    "ZFY",
    "ZIC1",
    "ZIC2",
    "ZIC3",
    "ZIC4",
    "ZIC5",
    "ZIK1",
    "ZIM2",
    "ZIM3",
    "ZKSCAN1",
    "ZKSCAN2",
    "ZKSCAN3",
    "ZKSCAN4",
    "ZKSCAN5",
    "ZKSCAN7",
    "ZKSCAN8",
    "ZMAT1",
    "ZMAT4",
    "ZNF10",
    "ZNF100",
    "ZNF101",
    "ZNF107",
    "ZNF112",
    "ZNF114",
    "ZNF117",
    "ZNF12",
    "ZNF121",
    "ZNF124",
    "ZNF131",
    "ZNF132",
    "ZNF133",
    "ZNF134",
    "ZNF135",
    "ZNF136",
    "ZNF138",
    "ZNF14",
    "ZNF140",
    "ZNF141",
    "ZNF142",
    "ZNF143",
    "ZNF146",
    "ZNF148",
    "ZNF154",
    "ZNF155",
    "ZNF157",
    "ZNF16",
    "ZNF160",
    "ZNF165",
    "ZNF169",
    "ZNF17",
    "ZNF174",
    "ZNF175",
    "ZNF177",
    "ZNF18",
    "ZNF180",
    "ZNF181",
    "ZNF182",
    "ZNF184",
    "ZNF189",
    "ZNF19",
    "ZNF195",
    "ZNF197",
    "ZNF2",
    "ZNF20",
    "ZNF200",
    "ZNF202",
    "ZNF205",
    "ZNF207",
    "ZNF208",
    "ZNF211",
    "ZNF212",
    "ZNF213",
    "ZNF214",
    "ZNF215",
    "ZNF217",
    "ZNF219",
    "ZNF22",
    "ZNF221",
    "ZNF222",
    "ZNF223",
    "ZNF224",
    "ZNF225",
    "ZNF226",
    "ZNF227",
    "ZNF229",
    "ZNF23",
    "ZNF230",
    "ZNF232",
    "ZNF233",
    "ZNF234",
    "ZNF235",
    "ZNF236",
    "ZNF239",
    "ZNF24",
    "ZNF248",
    "ZNF25",
    "ZNF250",
    "ZNF251",
    "ZNF253",
    "ZNF254",
    "ZNF256",
    "ZNF257",
    "ZNF26",
    "ZNF260",
    "ZNF263",
    "ZNF264",
    "ZNF266",
    "ZNF267",
    "ZNF268",
    "ZNF273",
    "ZNF274",
    "ZNF275",
    "ZNF276",
    "ZNF28",
    "ZNF280A",
    "ZNF280B",
    "ZNF280C",
    "ZNF280D",
    "ZNF281",
    "ZNF282",
    "ZNF283",
    "ZNF284",
    "ZNF285",
    "ZNF286A",
    "ZNF286B",
    "ZNF287",
    "ZNF292",
    "ZNF296",
    "ZNF3",
    "ZNF30",
    "ZNF300",
    "ZNF302",
    "ZNF304",
    "ZNF311",
    "ZNF316",
    "ZNF317",
    "ZNF318",
    "ZNF319",
    "ZNF32",
    "ZNF320",
    "ZNF322",
    "ZNF324",
    "ZNF324B",
    "ZNF326",
    "ZNF329",
    "ZNF331",
    "ZNF333",
    "ZNF334",
    "ZNF335",
    "ZNF337",
    "ZNF33A",
    "ZNF33B",
    "ZNF34",
    "ZNF341",
    "ZNF343",
    "ZNF345",
    "ZNF346",
    "ZNF347",
    "ZNF35",
    "ZNF350",
    "ZNF354A",
    "ZNF354B",
    "ZNF354C",
    "ZNF358",
    "ZNF362",
    "ZNF365",
    "ZNF366",
    "ZNF367",
    "ZNF37A",
    "ZNF382",
    "ZNF383",
    "ZNF384",
    "ZNF385A",
    "ZNF385B",
    "ZNF385C",
    "ZNF385D",
    "ZNF391",
    "ZNF394",
    "ZNF395",
    "ZNF396",
    "ZNF397",
    "ZNF398",
    "ZNF404",
    "ZNF407",
    "ZNF408",
    "ZNF41",
    "ZNF410",
    "ZNF414",
    "ZNF415",
    "ZNF416",
    "ZNF417",
    "ZNF418",
    "ZNF419",
    "ZNF420",
    "ZNF423",
    "ZNF425",
    "ZNF426",
    "ZNF428",
    "ZNF429",
    "ZNF43",
    "ZNF430",
    "ZNF431",
    "ZNF432",
    "ZNF433",
    "ZNF436",
    "ZNF438",
    "ZNF439",
    "ZNF44",
    "ZNF440",
    "ZNF441",
    "ZNF442",
    "ZNF443",
    "ZNF444",
    "ZNF445",
    "ZNF446",
    "ZNF449",
    "ZNF45",
    "ZNF451",
    "ZNF454",
    "ZNF460",
    "ZNF461",
    "ZNF462",
    "ZNF467",
    "ZNF468",
    "ZNF469",
    "ZNF470",
    "ZNF471",
    "ZNF473",
    "ZNF474",
    "ZNF479",
    "ZNF48",
    "ZNF480",
    "ZNF483",
    "ZNF484",
    "ZNF485",
    "ZNF486",
    "ZNF487",
    "ZNF488",
    "ZNF490",
    "ZNF491",
    "ZNF492",
    "ZNF493",
    "ZNF496",
    "ZNF497",
    "ZNF500",
    "ZNF501",
    "ZNF502",
    "ZNF503",
    "ZNF506",
    "ZNF507",
    "ZNF510",
    "ZNF511",
    "ZNF512B",
    "ZNF513",
    "ZNF514",
    "ZNF516",
    "ZNF517",
    "ZNF518A",
    "ZNF518B",
    "ZNF519",
    "ZNF521",
    "ZNF525",
    "ZNF526",
    "ZNF527",
    "ZNF528",
    "ZNF529",
    "ZNF530",
    "ZNF532",
    "ZNF534",
    "ZNF536",
    "ZNF540",
    "ZNF543",
    "ZNF544",
    "ZNF546",
    "ZNF547",
    "ZNF548",
    "ZNF549",
    "ZNF550",
    "ZNF551",
    "ZNF552",
    "ZNF554",
    "ZNF555",
    "ZNF556",
    "ZNF557",
    "ZNF558",
    "ZNF559",
    "ZNF560",
    "ZNF561",
    "ZNF562",
    "ZNF563",
    "ZNF564",
    "ZNF565",
    "ZNF566",
    "ZNF567",
    "ZNF568",
    "ZNF569",
    "ZNF57",
    "ZNF570",
    "ZNF571",
    "ZNF572",
    "ZNF573",
    "ZNF574",
    "ZNF575",
    "ZNF576",
    "ZNF577",
    "ZNF578",
    "ZNF579",
    "ZNF580",
    "ZNF581",
    "ZNF582",
    "ZNF583",
    "ZNF584",
    "ZNF585A",
    "ZNF585B",
    "ZNF586",
    "ZNF587",
    "ZNF587B",
    "ZNF589",
    "ZNF592",
    "ZNF594",
    "ZNF595",
    "ZNF596",
    "ZNF597",
    "ZNF598",
    "ZNF599",
    "ZNF600",
    "ZNF605",
    "ZNF606",
    "ZNF607",
    "ZNF608",
    "ZNF609",
    "ZNF610",
    "ZNF611",
    "ZNF613",
    "ZNF614",
    "ZNF615",
    "ZNF616",
    "ZNF618",
    "ZNF619",
    "ZNF620",
    "ZNF621",
    "ZNF623",
    "ZNF624",
    "ZNF625",
    "ZNF626",
    "ZNF627",
    "ZNF628",
    "ZNF629",
    "ZNF630",
    "ZNF639",
    "ZNF641",
    "ZNF644",
    "ZNF645",
    "ZNF646",
    "ZNF648",
    "ZNF649",
    "ZNF652",
    "ZNF654",
    "ZNF655",
    "ZNF658",
    "ZNF66",
    "ZNF660",
    "ZNF662",
    "ZNF664",
    "ZNF665",
    "ZNF667",
    "ZNF668",
    "ZNF669",
    "ZNF670",
    "ZNF671",
    "ZNF672",
    "ZNF674",
    "ZNF675",
    "ZNF676",
    "ZNF677",
    "ZNF678",
    "ZNF679",
    "ZNF680",
    "ZNF681",
    "ZNF682",
    "ZNF683",
    "ZNF684",
    "ZNF687",
    "ZNF688",
    "ZNF689",
    "ZNF69",
    "ZNF691",
    "ZNF692",
    "ZNF695",
    "ZNF696",
    "ZNF697",
    "ZNF699",
    "ZNF7",
    "ZNF70",
    "ZNF700",
    "ZNF701",
    "ZNF703",
    "ZNF704",
    "ZNF705A",
    "ZNF705B",
    "ZNF705D",
    "ZNF705E",
    "ZNF705G",
    "ZNF706",
    "ZNF707",
    "ZNF708",
    "ZNF709",
    "ZNF71",
    "ZNF710",
    "ZNF711",
    "ZNF713",
    "ZNF714",
    "ZNF716",
    "ZNF717",
    "ZNF718",
    "ZNF721",
    "ZNF724",
    "ZNF726",
    "ZNF727",
    "ZNF728",
    "ZNF729",
    "ZNF730",
    "ZNF732",
    "ZNF735",
    "ZNF736",
    "ZNF737",
    "ZNF74",
    "ZNF740",
    "ZNF746",
    "ZNF747",
    "ZNF749",
    "ZNF750",
    "ZNF75A",
    "ZNF75D",
    "ZNF76",
    "ZNF761",
    "ZNF763",
    "ZNF764",
    "ZNF765",
    "ZNF766",
    "ZNF768",
    "ZNF77",
    "ZNF770",
    "ZNF771",
    "ZNF772",
    "ZNF773",
    "ZNF774",
    "ZNF775",
    "ZNF776",
    "ZNF777",
    "ZNF778",
    "ZNF780A",
    "ZNF780B",
    "ZNF781",
    "ZNF782",
    "ZNF783",
    "ZNF784",
    "ZNF785",
    "ZNF786",
    "ZNF787",
    "ZNF788",
    "ZNF789",
    "ZNF79",
    "ZNF790",
    "ZNF791",
    "ZNF792",
    "ZNF793",
    "ZNF799",
    "ZNF8",
    "ZNF80",
    "ZNF800",
    "ZNF804A",
    "ZNF804B",
    "ZNF805",
    "ZNF808",
    "ZNF81",
    "ZNF813",
    "ZNF814",
    "ZNF816",
    "ZNF821",
    "ZNF823",
    "ZNF827",
    "ZNF829",
    "ZNF83",
    "ZNF830",
    "ZNF831",
    "ZNF835",
    "ZNF836",
    "ZNF837",
    "ZNF84",
    "ZNF841",
    "ZNF843",
    "ZNF844",
    "ZNF845",
    "ZNF846",
    "ZNF85",
    "ZNF850",
    "ZNF852",
    "ZNF853",
    "ZNF860",
    "ZNF865",
    "ZNF878",
    "ZNF879",
    "ZNF880",
    "ZNF883",
    "ZNF888",
    "ZNF891",
    "ZNF90",
    "ZNF91",
    "ZNF92",
    "ZNF93",
    "ZNF98",
    "ZNF99",
    "ZSCAN1",
    "ZSCAN10",
    "ZSCAN12",
    "ZSCAN16",
    "ZSCAN18",
    "ZSCAN2",
    "ZSCAN20",
    "ZSCAN21",
    "ZSCAN22",
    "ZSCAN23",
    "ZSCAN25",
    "ZSCAN26",
    "ZSCAN29",
    "ZSCAN30",
    "ZSCAN31",
    "ZSCAN32",
    "ZSCAN4",
    "ZSCAN5A",
    "ZSCAN5B",
    "ZSCAN5C",
    "ZSCAN9",
    "ZUFSP",
    "ZXDA",
    "ZXDB",
    "ZXDC",
    "PATZ1",
    "ZBTB24",
    "ZNF524",
    "ZNF653",
    "ZNF277",
    "ZNF512",
    "ZEB1",
    "ZEB2",
    "ZFHX3",
    "ZFHX4",
    "TRERF1",
    "ZNF541",
    "NFYA",
    "MBNL2",
    "ZC3H8",
    "ZGPAT",
    "CENPB",
    "CENPBD1",
    "JRK",
    "JRKL",
    "TIGD1",
    "TIGD2",
    "TIGD3",
    "TIGD4",
    "TIGD5",
    "TIGD6",
    "TIGD7",
    "CAMTA1",
    "CAMTA2",
    "LIN28A",
    "LIN28B",
    "YBX1",
    "YBX2",
    "YBX3",
    "RBPJ",
    "RBPJL",
    "CUX1",
    "CUX2",
    "ONECUT1",
    "ONECUT2",
    "ONECUT3",
    "SATB1",
    "SATB2",
    "CXXC1",
    "CXXC4",
    "CXXC5",
    "DNMT1",
    "FBXL19",
    "KDM2A",
    "KDM2B",
    "TET1",
    "TET3",
    "KMT2A",
    "KMT2B",
    "DMRT1",
    "DMRT2",
    "DMRT3",
    "DMRTA1",
    "DMRTA2",
    "DMRTB1",
    "DMRTC2",
    "E2F1",
    "E2F2",
    "E2F3",
    "E2F4",
    "E2F5",
    "E2F6",
    "E2F7",
    "E2F8",
    "TFDP1",
    "TFDP2",
    "TFDP3",
    "EBF1",
    "EBF2",
    "EBF3",
    "EBF4",
    "EHF",
    "ELF1",
    "ELF2",
    "ELF4",
    "ELF5",
    "ELK1",
    "ELK3",
    "ELK4",
    "ERF",
    "ERG",
    "ETS1",
    "ETS2",
    "ETV1",
    "ETV2",
    "ETV3",
    "ETV3L",
    "ETV4",
    "ETV5",
    "ETV6",
    "ETV7",
    "FEV",
    "FLI1",
    "GABPA",
    "SPDEF",
    "SPI1",
    "SPIB",
    "SPIC",
    "ELF3",
    "FLYWCH1",
    "FOXA1",
    "FOXA2",
    "FOXA3",
    "FOXB1",
    "FOXB2",
    "FOXC1",
    "FOXC2",
    "FOXD1",
    "FOXD2",
    "FOXD3",
    "FOXD4",
    "FOXD4L1",
    "FOXD4L3",
    "FOXD4L4",
    "FOXD4L5",
    "FOXD4L6",
    "FOXE1",
    "FOXE3",
    "FOXF1",
    "FOXF2",
    "FOXG1",
    "FOXH1",
    "FOXI1",
    "FOXI2",
    "FOXI3",
    "FOXJ1",
    "FOXJ2",
    "FOXJ3",
    "FOXK1",
    "FOXK2",
    "FOXL1",
    "FOXL2",
    "FOXM1",
    "FOXN1",
    "FOXN2",
    "FOXN3",
    "FOXN4",
    "FOXO1",
    "FOXO3",
    "FOXO4",
    "FOXO6",
    "FOXP1",
    "FOXP2",
    "FOXP3",
    "FOXP4",
    "FOXQ1",
    "FOXR1",
    "FOXR2",
    "FOXS1",
    "GATA1",
    "GATA2",
    "GATA3",
    "GATA4",
    "GATA5",
    "GATA6",
    "GATAD2A",
    "GATAD2B",
    "TRPS1",
    "ZGLP1",
    "GCM1",
    "GCM2",
    "GRHL1",
    "GRHL2",
    "GRHL3",
    "TFCP2",
    "TFCP2L1",
    "UBP1",
    "GTF2I",
    "GTF2IRD1",
    "GTF2IRD2",
    "GTF2IRD2B",
    "BBX",
    "CIC",
    "HBP1",
    "HMG20A",
    "HMG20B",
    "HMGN3",
    "LEF1",
    "SOX1",
    "SOX10",
    "SOX11",
    "SOX12",
    "SOX13",
    "SOX14",
    "SOX15",
    "SOX17",
    "SOX18",
    "SOX2",
    "SOX21",
    "SOX3",
    "SOX30",
    "SOX4",
    "SOX5",
    "SOX6",
    "SOX7",
    "SOX8",
    "SOX9",
    "SRY",
    "TCF7",
    "TCF7L1",
    "TCF7L2",
    "ADNP",
    "ADNP2",
    "ALX1",
    "ALX3",
    "ALX4",
    "ANHX",
    "ARGFX",
    "ARX",
    "BARHL1",
    "BARHL2",
    "BARX1",
    "BARX2",
    "BSX",
    "CDX1",
    "CDX2",
    "CDX4",
    "CRX",
    "DBX1",
    "DBX2",
    "DLX1",
    "DLX2",
    "DLX3",
    "DLX4",
    "DLX5",
    "DLX6",
    "DMBX1",
    "DPRX",
    "DRGX",
    "DUX1",
    "DUX3",
    "DUX4",
    "DUXA",
    "EMX1",
    "EMX2",
    "EN1",
    "EN2",
    "ESX1",
    "EVX1",
    "EVX2",
    "GBX1",
    "GBX2",
    "GSC",
    "GSC2",
    "GSX1",
    "GSX2",
    "HDX",
    "HESX1",
    "HHEX",
    "HLX",
    "HMBOX1",
    "HMX1",
    "HMX2",
    "HMX3",
    "HNF1A",
    "HNF1B",
    "HOMEZ",
    "HOXA1",
    "HOXA10",
    "HOXA11",
    "HOXA13",
    "HOXA2",
    "HOXA3",
    "HOXA4",
    "HOXA5",
    "HOXA6",
    "HOXA7",
    "HOXA9",
    "HOXB1",
    "HOXB13",
    "HOXB2",
    "HOXB3",
    "HOXB4",
    "HOXB5",
    "HOXB6",
    "HOXB7",
    "HOXB8",
    "HOXB9",
    "HOXC10",
    "HOXC11",
    "HOXC12",
    "HOXC13",
    "HOXC4",
    "HOXC5",
    "HOXC6",
    "HOXC8",
    "HOXC9",
    "HOXD1",
    "HOXD10",
    "HOXD11",
    "HOXD12",
    "HOXD13",
    "HOXD3",
    "HOXD4",
    "HOXD8",
    "HOXD9",
    "IRX1",
    "IRX2",
    "IRX3",
    "IRX4",
    "IRX5",
    "IRX6",
    "ISL1",
    "ISL2",
    "ISX",
    "LBX1",
    "LBX2",
    "LEUTX",
    "LHX1",
    "LHX2",
    "LHX3",
    "LHX4",
    "LHX5",
    "LHX6",
    "LHX8",
    "LHX9",
    "LMX1A",
    "LMX1B",
    "MEIS1",
    "MEIS2",
    "MEIS3",
    "MEOX1",
    "MEOX2",
    "MIXL1",
    "MKX",
    "MNX1",
    "MSX1",
    "MSX2",
    "NANOG",
    "NANOGNB",
    "NANOGP8",
    "NKX1-1",
    "NKX1-2",
    "NKX2-1",
    "NKX2-2",
    "NKX2-3",
    "NKX2-4",
    "NKX2-5",
    "NKX2-6",
    "NKX2-8",
    "NKX3-1",
    "NKX3-2",
    "NKX6-1",
    "NKX6-2",
    "NKX6-3",
    "NOBOX",
    "NOTO",
    "OTP",
    "OTX1",
    "OTX2",
    "PBX1",
    "PBX2",
    "PBX3",
    "PBX4",
    "PDX1",
    "PHOX2A",
    "PHOX2B",
    "PITX1",
    "PITX2",
    "PITX3",
    "PKNOX1",
    "PKNOX2",
    "PROP1",
    "PRRX1",
    "PRRX2",
    "RAX",
    "RAX2",
    "RHOXF1",
    "RHOXF2",
    "RHOXF2B",
    "SEBOX",
    "SHOX",
    "SHOX2",
    "SIX1",
    "SIX2",
    "SIX3",
    "SIX4",
    "SIX5",
    "SIX6",
    "TGIF1",
    "TGIF2",
    "TGIF2LX",
    "TGIF2LY",
    "TLX1",
    "TLX2",
    "TLX3",
    "TPRX1",
    "UNCX",
    "VAX1",
    "VAX2",
    "VENTX",
    "VSX1",
    "VSX2",
    "ZFHX2",
    "ZHX1",
    "ZHX2",
    "ZHX3",
    "PAX2",
    "PAX3",
    "PAX4",
    "PAX6",
    "PAX7",
    "POU1F1",
    "POU2F1",
    "POU2F2",
    "POU2F3",
    "POU3F1",
    "POU3F2",
    "POU3F3",
    "POU3F4",
    "POU4F1",
    "POU4F2",
    "POU4F3",
    "POU5F1",
    "POU5F1B",
    "POU5F2",
    "POU6F1",
    "POU6F2",
    "HSF1",
    "HSF2",
    "HSF4",
    "HSF5",
    "HSFX1",
    "HSFX2",
    "HSFY1",
    "HSFY2",
    "IRF1",
    "IRF2",
    "IRF3",
    "IRF4",
    "IRF5",
    "IRF6",
    "IRF7",
    "IRF8",
    "IRF9",
    "MSANTD1",
    "MSANTD3",
    "NAIF1",
    "BORCS8-MEF2B",
    "MEF2A",
    "MEF2B",
    "MEF2C",
    "MEF2D",
    "SRF",
    "BAZ2B",
    "MBD2",
    "MBD3",
    "MBD4",
    "MBD6",
    "PIN1",
    "SETDB1",
    "SETDB2",
    "BAZ2A",
    "MECP2",
    "MBD1",
    "MTERF1",
    "MTERF2",
    "MTERF3",
    "MTERF4",
    "CDC5L",
    "DMTF1",
    "MSANTD4",
    "MYB",
    "MYBL1",
    "MYBL2",
    "MYPOP",
    "MYSM1",
    "SNAPC4",
    "TERB1",
    "TERF1",
    "TERF2",
    "TTF1",
    "ZZZ3",
    "MYRF",
    "MYRFL",
    "NFX1",
    "NFXL1",
    "AR",
    "ESR1",
    "ESR2",
    "ESRRA",
    "ESRRB",
    "ESRRG",
    "HNF4A",
    "HNF4G",
    "NR0B1",
    "NR1D1",
    "NR1D2",
    "NR1H2",
    "NR1H3",
    "NR1H4",
    "NR1I2",
    "NR1I3",
    "NR2C1",
    "NR2C2",
    "NR2E1",
    "NR2E3",
    "NR2F1",
    "NR2F2",
    "NR2F6",
    "NR3C1",
    "NR3C2",
    "NR4A1",
    "NR4A2",
    "NR4A3",
    "NR5A1",
    "NR5A2",
    "NR6A1",
    "PGR",
    "PPARA",
    "PPARD",
    "PPARG",
    "RARA",
    "RARB",
    "RARG",
    "RORA",
    "RORB",
    "RORC",
    "RXRA",
    "RXRB",
    "RXRG",
    "THRA",
    "THRB",
    "VDR",
    "AEBP1",
    "ARHGAP35",
    "BPTF",
    "BRF2",
    "CARF",
    "CC2D1A",
    "CEBPZ",
    "CENPA",
    "CENPS",
    "CENPT",
    "CENPX",
    "CGGBP1",
    "CHCHD3",
    "CPEB1",
    "CSRNP1",
    "CSRNP2",
    "CSRNP3",
    "DACH1",
    "DACH2",
    "DR1",
    "DRAP1",
    "GLMP",
    "GPBP1",
    "GPBP1L1",
    "GTF2B",
    "KCNIP3",
    "LTF",
    "MTF2",
    "NACC2",
    "NFE4",
    "NFYB",
    "NFYC",
    "NKRF",
    "NME2",
    "NRF1",
    "PA2G4",
    "PCGF2",
    "PCGF6",
    "PHF1",
    "PHF19",
    "PLSCR1",
    "POU2AF1",
    "PREB",
    "PURA",
    "PURB",
    "PURG",
    "RAG1",
    "RBCK1",
    "REXO4",
    "SAFB",
    "SAFB2",
    "SCMH1",
    "SKI",
    "SKIL",
    "SKOR1",
    "SMYD3",
    "SNAPC2",
    "SNAPC5",
    "SON",
    "SPEN",
    "SPZ1",
    "TCF20",
    "TET2",
    "THYN1",
    "TMF1",
    "TOPORS",
    "TSC22D1",
    "XPA",
    "TP53",
    "TP63",
    "TP73",
    "PAX1",
    "PAX5",
    "PAX8",
    "PAX9",
    "LCOR",
    "LCORL",
    "PROX1",
    "PROX2",
    "NFAT5",
    "NFATC1",
    "NFATC2",
    "NFATC3",
    "NFATC4",
    "NFKB1",
    "NFKB2",
    "REL",
    "RELA",
    "RELB",
    "RFX1",
    "RFX2",
    "RFX3",
    "RFX4",
    "RFX5",
    "RFX6",
    "RFX7",
    "RFX8",
    "RUNX1",
    "RUNX2",
    "RUNX3",
    "AIRE",
    "DEAF1",
    "GMEB1",
    "GMEB2",
    "SKOR2",
    "SP100",
    "SP110",
    "SP140",
    "SP140L",
    "NFIA",
    "NFIB",
    "NFIC",
    "NFIX",
    "SMAD1",
    "SMAD3",
    "SMAD4",
    "SMAD5",
    "SMAD9",
    "STAT1",
    "STAT2",
    "STAT3",
    "STAT4",
    "STAT5A",
    "STAT5B",
    "STAT6",
    "EOMES",
    "MGA",
    "T",
    "TBR1",
    "TBX1",
    "TBX10",
    "TBX15",
    "TBX18",
    "TBX19",
    "TBX2",
    "TBX20",
    "TBX21",
    "TBX22",
    "TBX3",
    "TBX4",
    "TBX5",
    "TBX6",
    "TBP",
    "TBPL1",
    "TBPL2",
    "LIN54",
    "TEAD1",
    "TEAD2",
    "TEAD3",
    "TEAD4",
    "THAP1",
    "THAP10",
    "THAP11",
    "THAP12",
    "THAP2",
    "THAP3",
    "THAP4",
    "THAP5",
    "THAP6",
    "THAP7",
    "THAP8",
    "THAP9",
]

# Step 5: Gene Expression Analysis - Show Top 10 Target Genes
print("\n" + "=" * 50)
print("TRANSCRIPTION FACTOR EXPRESSION ANALYSIS")
print("=" * 50)

# Calculate number of cells expressing each gene (non-zero counts)
print("Calculating gene expression statistics...")

# Convert to dense if sparse (for easier computation)
if hasattr(adata.X, "toarray"):
    expression_matrix = adata.X.toarray()
else:
    expression_matrix = adata.X

# Count non-zero expressions per gene
gene_cell_counts = np.sum(expression_matrix > 0, axis=0)
gene_names = adata.var_names

# Create a dataframe for easier handling
gene_stats = pd.DataFrame(
    {
        "gene_name": gene_names,
        "cells_expressing": gene_cell_counts,
        "expression_percentage": (gene_cell_counts / adata.n_obs) * 100,
    }
)

# Get available perturbation conditions (exclude 'ctrl')
available_conditions = adata.obs["condition"].unique()
perturbed_conditions = [
    cond for cond in available_conditions if cond != "ctrl" and "+ctrl" in cond
]
perturbed_genes = [cond.replace("+ctrl", "") for cond in perturbed_conditions]

print(f"Found {len(perturbed_genes)} perturbed genes in the dataset")

# Filter to only target genes that were actually perturbed
target_gene_stats = gene_stats[
    (gene_stats["gene_name"].isin(target_genes))
    & (gene_stats["gene_name"].isin(perturbed_genes))
].copy()

if len(target_gene_stats) == 0:
    print("No target transcription factors were perturbed in this dataset!")
    print(
        "Perturbed genes that are NOT in target list:",
        [g for g in perturbed_genes if g not in target_genes],
    )
    exit()

# Sort by number of cells expressing the gene
target_gene_stats_sorted = target_gene_stats.sort_values(
    "cells_expressing", ascending=False
)

print(
    f"Found {len(target_gene_stats)} target transcription factors that were actually perturbed"
)
print(f"Total target genes in list: {len(target_genes)}")

# Show top 10 target genes that were actually perturbed
display_count = min(10, len(target_gene_stats_sorted))
print(f"\nTOP {display_count}  by number of expressing cells:")
print("-" * 60)
for i, (idx, row) in enumerate(
    target_gene_stats_sorted.head(display_count).iterrows(), 1
):
    condition_name = f"{row['gene_name']}+ctrl"
    condition_count = (adata.obs["condition"] == condition_name).sum()
    print(f"{i:2d}. {row['gene_name']}")
    print(
        f"Cells expressing: {row['cells_expressing']} out of {adata.n_obs} ({row['expression_percentage']:.2f}%)"
    )
    print(f"Perturbed cells available: {condition_count}")
    print()
# Step 6: User Input
print(f"\n" + "=" * 50)
while True:
    chosen_gene = input("Enter the transcription factor name: ").strip()
    if chosen_gene in target_gene_stats["gene_name"].values:
        print(f"Selected transcription factor: {chosen_gene}")
        break
    else:
        print(
            f"Transcription factor '{chosen_gene}' not found in perturbed dataset or not in target list."
        )
        available_options = [
            row["gene_name"]
            for idx, row in target_gene_stats_sorted.head(10).iterrows()
        ]
        print("Available perturbed transcription factors:", available_options)

# Step 7: Get gene information
gene_info = target_gene_stats[target_gene_stats["gene_name"] == chosen_gene].iloc[0]
print(f"\nTranscription factor '{chosen_gene}' statistics:")
print(f"Cells expressing: {gene_info['cells_expressing']} out of {adata.n_obs}")
print(f"Expression percentage: {gene_info['expression_percentage']:.2f}%")

# Step 8: proceed with file creation
while True:
    proceed = (
        input(
            f"\nProceed with creating files for transcription factor '{chosen_gene}'? (Y/N): "
        )
        .strip()
        .upper()
    )
    if proceed in ["Y", "YES"]:
        print("Proceeding with file creation...")
        break
    elif proceed in ["N", "NO"]:
        print("Analysis stopped by user.")
        exit()
    else:
        print("Please enter Y or N.")

# Step 9: Filter data based on chosen gene condition
print(f"\nCreating filtered dataset for condition '{chosen_gene}+ctrl'...")

# Filter to the specific condition 'chosen_gene+ctrl'
target_condition = f"{chosen_gene}+ctrl"
print(f"Looking for condition: '{target_condition}'")

# Check if the condition exists
available_conditions = adata.obs["condition"].unique()
if target_condition not in available_conditions:
    print(f"ERROR: Condition '{target_condition}' not found in dataset!")
    print("Available conditions:", sorted(available_conditions))
    exit()

# Filter to the specific condition - ALL cells from this condition
filtered_adata = adata[adata.obs["condition"] == target_condition].copy()
print(f"Filtered to condition '{target_condition}': {filtered_adata.shape}")

if filtered_adata.n_obs == 0:
    print(f"ERROR: No cells found for condition '{target_condition}'")
    exit()

# Step 10: Save the filtered dataset
output_file = f"Data/{chosen_gene}_perturbed_only.h5ad"
sc.write(output_file, filtered_adata)
print(f"Saved filtered dataset to: {output_file}")

# Step 11: Summary
print("\nSummary:")
print(f"- Original dataset shape: {adata.shape}")
print(f"- Cells from condition '{target_condition}': {filtered_adata.shape}")
print(f"- Gene identifiers: Gene names (instead of ENSEMBL IDs)")
print(f"- File saved as: {os.path.abspath(output_file)}")

# Step 12: Show metadata about the filtered data
print(f"\nFiltered data details:")
print(f"- Selected transcription factor: {chosen_gene}")
print(f"- Condition: {target_condition}")
print(f"- Number of cells: {filtered_adata.n_obs}")
print(f"- Number of genes: {filtered_adata.n_vars}")
if "cell_type" in filtered_adata.obs.columns:
    print(f"- Cell types in filtered data: {filtered_adata.obs['cell_type'].unique()}")
if "dose_val" in filtered_adata.obs.columns:
    print(f"- Dose values: {filtered_adata.obs['dose_val'].unique()}")

print(f"\nFile creation completed!")
print(
    f"This dataset contains all cells perturbed with {chosen_gene} - ready for analyzing genes regulated BY {chosen_gene}!"
)


# import pandas as pd
# import scanpy as sc
# import sys
# from pathlib import Path

# #
# tsv_file = "Data/tf.tsv"
# h5ad_file = "Data\IER3IP1.h5ad"

# # Load TSV file (assuming TFs are in first column)
# print(f"Loading TSV file: {tsv_file}")
# df = pd.read_csv(tsv_file, sep="\t", header=None)
# tfs_in_network = set(df.iloc[:, 0].unique())
# # Remove 'regulator' header if present
# tfs_in_network.discard("regulator")
# print(f"Found {len(tfs_in_network)} unique TFs in network file")

# # Load h5ad file
# print(f"Loading h5ad file: {h5ad_file}")
# adata = sc.read_h5ad(h5ad_file)
# gene_symbols_in_data = set(adata.var["gene_name"])
# print(f"Found {len(gene_symbols_in_data)} gene symbols in expression data")

# # Check overlap
# tfs_found = tfs_in_network.intersection(gene_symbols_in_data)
# tfs_missing = tfs_in_network - gene_symbols_in_data

# print(f"\nResults:")
# print(
#     f"TFs found in expression data: {len(tfs_found)}/{len(tfs_in_network)} ({len(tfs_found)/len(tfs_in_network)*100:.1f}%)"
# )
# print(f"TFs missing from expression data: {len(tfs_missing)}")

# if tfs_missing:
#     print(f"\nMissing TFs (first 10):")
#     for tf in list(tfs_missing)[:10]:
#         print(f"  - {tf}")
#     if len(tfs_missing) > 10:
#         print(f"  ... and {len(tfs_missing) - 10} more")

# if tfs_found:
#     print(f"\nFound TFs (first 10):")
#     for tf in list(tfs_found)[:10]:
#         print(f"  - {tf}")
#     if len(tfs_found) > 10:
#         print(f"  ... and {len(tfs_found) - 10} more")

# # Create mapping from gene symbol to ENSEMBL ID for found TFs
# if len(tfs_found) > 0:
#     print(f"\nCreating gene symbol to ENSEMBL ID mapping...")
#     symbol_to_ensembl = {}
#     for ensembl_id, gene_symbol in zip(adata.var_names, adata.var["gene_name"]):
#         if gene_symbol in tfs_found:
#             symbol_to_ensembl[gene_symbol] = ensembl_id

#     print(f"Sample mappings:")
#     for i, (symbol, ensembl) in enumerate(list(symbol_to_ensembl.items())[:5]):
#         print(f"  {symbol} -> {ensembl}")

#     # Save the mapping for later use
#     mapping_df = pd.DataFrame(
#         list(symbol_to_ensembl.items()), columns=["gene_symbol", "ensembl_id"]
#     )
#     mapping_file = "gene_symbol_to_ensembl_mapping.tsv"
#     mapping_df.to_csv(mapping_file, sep="\t", index=False)
#     print(f"\nMapping saved to: {mapping_file}")
#     mapping_df.to_csv(mapping_file, sep="\t", index=False)
#     print(f"\nMapping saved to: {mapping_file}")


#     print(f"\nMapping saved to: {mapping_file}")
